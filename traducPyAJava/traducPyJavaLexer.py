# Generated from traducPyJava.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,245,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,3,0,81,8,0,1,0,1,0,1,1,4,1,86,8,1,11,1,12,1,87,1,1,1,1,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,5,34,198,8,34,10,34,12,34,201,9,34,
        1,35,4,35,204,8,35,11,35,12,35,205,1,36,4,36,209,8,36,11,36,12,36,
        210,1,36,1,36,4,36,215,8,36,11,36,12,36,216,1,37,1,37,5,37,221,8,
        37,10,37,12,37,224,9,37,1,37,1,37,1,37,5,37,229,8,37,10,37,12,37,
        232,9,37,1,37,3,37,235,8,37,1,38,1,38,5,38,239,8,38,10,38,12,38,
        242,9,38,1,38,1,38,2,222,230,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,
        5,2,0,9,9,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,2,0,10,10,13,13,254,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,1,80,1,0,0,0,3,85,1,0,0,0,5,91,1,0,0,0,7,95,1,0,
        0,0,9,102,1,0,0,0,11,105,1,0,0,0,13,110,1,0,0,0,15,116,1,0,0,0,17,
        120,1,0,0,0,19,123,1,0,0,0,21,129,1,0,0,0,23,135,1,0,0,0,25,142,
        1,0,0,0,27,146,1,0,0,0,29,149,1,0,0,0,31,153,1,0,0,0,33,155,1,0,
        0,0,35,157,1,0,0,0,37,159,1,0,0,0,39,161,1,0,0,0,41,163,1,0,0,0,
        43,165,1,0,0,0,45,168,1,0,0,0,47,171,1,0,0,0,49,173,1,0,0,0,51,175,
        1,0,0,0,53,178,1,0,0,0,55,181,1,0,0,0,57,183,1,0,0,0,59,185,1,0,
        0,0,61,187,1,0,0,0,63,189,1,0,0,0,65,191,1,0,0,0,67,193,1,0,0,0,
        69,195,1,0,0,0,71,203,1,0,0,0,73,208,1,0,0,0,75,234,1,0,0,0,77,236,
        1,0,0,0,79,81,5,13,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,
        82,83,5,10,0,0,83,2,1,0,0,0,84,86,7,0,0,0,85,84,1,0,0,0,86,87,1,
        0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,90,6,1,0,0,90,
        4,1,0,0,0,91,92,5,100,0,0,92,93,5,101,0,0,93,94,5,102,0,0,94,6,1,
        0,0,0,95,96,5,114,0,0,96,97,5,101,0,0,97,98,5,116,0,0,98,99,5,117,
        0,0,99,100,5,114,0,0,100,101,5,110,0,0,101,8,1,0,0,0,102,103,5,105,
        0,0,103,104,5,102,0,0,104,10,1,0,0,0,105,106,5,101,0,0,106,107,5,
        108,0,0,107,108,5,115,0,0,108,109,5,101,0,0,109,12,1,0,0,0,110,111,
        5,119,0,0,111,112,5,104,0,0,112,113,5,105,0,0,113,114,5,108,0,0,
        114,115,5,101,0,0,115,14,1,0,0,0,116,117,5,102,0,0,117,118,5,111,
        0,0,118,119,5,114,0,0,119,16,1,0,0,0,120,121,5,105,0,0,121,122,5,
        110,0,0,122,18,1,0,0,0,123,124,5,112,0,0,124,125,5,114,0,0,125,126,
        5,105,0,0,126,127,5,110,0,0,127,128,5,116,0,0,128,20,1,0,0,0,129,
        130,5,99,0,0,130,131,5,108,0,0,131,132,5,97,0,0,132,133,5,115,0,
        0,133,134,5,115,0,0,134,22,1,0,0,0,135,136,5,105,0,0,136,137,5,109,
        0,0,137,138,5,112,0,0,138,139,5,111,0,0,139,140,5,114,0,0,140,141,
        5,116,0,0,141,24,1,0,0,0,142,143,5,97,0,0,143,144,5,110,0,0,144,
        145,5,100,0,0,145,26,1,0,0,0,146,147,5,111,0,0,147,148,5,114,0,0,
        148,28,1,0,0,0,149,150,5,110,0,0,150,151,5,111,0,0,151,152,5,116,
        0,0,152,30,1,0,0,0,153,154,5,61,0,0,154,32,1,0,0,0,155,156,5,43,
        0,0,156,34,1,0,0,0,157,158,5,45,0,0,158,36,1,0,0,0,159,160,5,42,
        0,0,160,38,1,0,0,0,161,162,5,47,0,0,162,40,1,0,0,0,163,164,5,37,
        0,0,164,42,1,0,0,0,165,166,5,61,0,0,166,167,5,61,0,0,167,44,1,0,
        0,0,168,169,5,33,0,0,169,170,5,61,0,0,170,46,1,0,0,0,171,172,5,60,
        0,0,172,48,1,0,0,0,173,174,5,62,0,0,174,50,1,0,0,0,175,176,5,60,
        0,0,176,177,5,61,0,0,177,52,1,0,0,0,178,179,5,62,0,0,179,180,5,61,
        0,0,180,54,1,0,0,0,181,182,5,40,0,0,182,56,1,0,0,0,183,184,5,41,
        0,0,184,58,1,0,0,0,185,186,5,91,0,0,186,60,1,0,0,0,187,188,5,93,
        0,0,188,62,1,0,0,0,189,190,5,58,0,0,190,64,1,0,0,0,191,192,5,44,
        0,0,192,66,1,0,0,0,193,194,5,46,0,0,194,68,1,0,0,0,195,199,7,1,0,
        0,196,198,7,2,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,
        0,199,200,1,0,0,0,200,70,1,0,0,0,201,199,1,0,0,0,202,204,7,3,0,0,
        203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,
        206,72,1,0,0,0,207,209,7,3,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,
        208,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,214,5,46,0,0,213,
        215,7,3,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,1,0,0,0,216,
        217,1,0,0,0,217,74,1,0,0,0,218,222,5,34,0,0,219,221,9,0,0,0,220,
        219,1,0,0,0,221,224,1,0,0,0,222,223,1,0,0,0,222,220,1,0,0,0,223,
        225,1,0,0,0,224,222,1,0,0,0,225,235,5,34,0,0,226,230,5,39,0,0,227,
        229,9,0,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,231,1,0,0,0,230,
        228,1,0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,235,5,39,0,0,234,
        218,1,0,0,0,234,226,1,0,0,0,235,76,1,0,0,0,236,240,5,35,0,0,237,
        239,8,4,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,
        241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,6,38,0,0,244,
        78,1,0,0,0,11,0,80,87,199,205,210,216,222,230,234,240,1,6,0,0
    ]

class traducPyJavaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NEWLINE = 1
    WS = 2
    DEF = 3
    RETURN = 4
    IF = 5
    ELSE = 6
    WHILE = 7
    FOR = 8
    IN = 9
    PRINT = 10
    CLASS = 11
    IMPORT = 12
    AND = 13
    OR = 14
    NOT = 15
    ASSIGN = 16
    PLUS = 17
    MINUS = 18
    MULT = 19
    DIV = 20
    MOD = 21
    EQ = 22
    NEQ = 23
    LT = 24
    GT = 25
    LEQ = 26
    GEQ = 27
    LPAREN = 28
    RPAREN = 29
    LBRACKET = 30
    RBRACKET = 31
    COLON = 32
    COMMA = 33
    DOT = 34
    IDENTIFIER = 35
    INT = 36
    FLOAT = 37
    STRING = 38
    COMMENT = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'return'", "'if'", "'else'", "'while'", "'for'", "'in'", 
            "'print'", "'class'", "'import'", "'and'", "'or'", "'not'", 
            "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", 
            "'>'", "'<='", "'>='", "'('", "')'", "'['", "']'", "':'", "','", 
            "'.'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "WS", "DEF", "RETURN", "IF", "ELSE", "WHILE", "FOR", 
            "IN", "PRINT", "CLASS", "IMPORT", "AND", "OR", "NOT", "ASSIGN", 
            "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQ", "NEQ", "LT", "GT", 
            "LEQ", "GEQ", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", 
            "COMMA", "DOT", "IDENTIFIER", "INT", "FLOAT", "STRING", "COMMENT" ]

    ruleNames = [ "NEWLINE", "WS", "DEF", "RETURN", "IF", "ELSE", "WHILE", 
                  "FOR", "IN", "PRINT", "CLASS", "IMPORT", "AND", "OR", 
                  "NOT", "ASSIGN", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
                  "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "LPAREN", "RPAREN", 
                  "LBRACKET", "RBRACKET", "COLON", "COMMA", "DOT", "IDENTIFIER", 
                  "INT", "FLOAT", "STRING", "COMMENT" ]

    grammarFileName = "traducPyJava.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


